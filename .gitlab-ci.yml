# GitLab CI/CD Pipeline for Coverage Guardian Enforcement
# Supports multiple Python versions and comprehensive testing

stages:
  - test
  - coverage-validation
  - security-scan
  - deployment-readiness

variables:
  COVERAGE_THRESHOLD: "100"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .venv/

before_script:
  - python3 -m venv .venv
  - source .venv/bin/activate
  - pip install --upgrade pip
  - pip install pytest coverage pytest-cov
  - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

# Test with multiple Python versions
.test_template: &test_template
  stage: test
  script:
    - source .venv/bin/activate
    - echo "🧪 Running tests with Python $PYTHON_VERSION"
    - coverage run --source=. -m pytest tests/ -v
    - coverage report --show-missing
    - coverage xml
    - coverage json
    - coverage html
    - coverage report --fail-under=$COVERAGE_THRESHOLD
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
      - coverage.xml
      - coverage.json
    expire_in: 7 days
  coverage: '/TOTAL.*\s+(\d+%)$/'

test:python3.10:
  <<: *test_template
  image: python:3.10
  variables:
    PYTHON_VERSION: "3.10"

test:python3.11:
  <<: *test_template
  image: python:3.11
  variables:
    PYTHON_VERSION: "3.11"

test:python3.12:
  <<: *test_template
  image: python:3.12
  variables:
    PYTHON_VERSION: "3.12"

# Guardian Enforcement
coverage-guardian:
  stage: coverage-validation
  image: python:3.12
  needs: ["test:python3.12"]
  script:
    - source .venv/bin/activate
    - echo "🛡️ Running Coverage Guardian Enforcement"
    - chmod +x scripts/ci_coverage_check.sh
    - scripts/ci_coverage_check.sh
    - echo "🔒 Validating security-critical files"
    - |
      SECURITY_FILES="makepin.py recoverpin.py helpers.py words.py"
      for file in $SECURITY_FILES; do
        if [ -f "$file" ]; then
          file_coverage=$(coverage report --include="$file" | tail -1 | awk '{print $4}' | sed 's/%//')
          if [ "$file_coverage" != "100" ]; then
            echo "❌ SECURITY RISK: $file has $file_coverage% coverage (MUST be 100%)"
            exit 1
          fi
          echo "✅ Security file $file: 100% coverage"
        fi
      done
  artifacts:
    paths:
      - coverage_artifacts/
      - coverage_status.env
    expire_in: 30 days
  only:
    - main
    - develop
    - merge_requests

# Security scanning with coverage
security-scan:
  stage: security-scan
  image: python:3.12
  needs: ["coverage-guardian"]
  script:
    - source .venv/bin/activate
    - pip install bandit safety semgrep
    - echo "🔒 Running comprehensive security scans"
    - bandit -r . -x tests/ -f json -o security-bandit.json || true
    - safety check --json --output security-safety.json || true
    - semgrep --config=auto --json --output security-semgrep.json . || true
    - echo "🛡️ Running coverage with security focus"
    - coverage run --source=. -m pytest tests/ -v
    - coverage report --show-missing
  artifacts:
    paths:
      - security-*.json
      - coverage.xml
      - coverage.json
    expire_in: 30 days
  allow_failure: true

# Complete test suite
complete-test-suite:
  stage: coverage-validation
  image: python:3.12
  needs: ["test:python3.12"]
  script:
    - source .venv/bin/activate
    - echo "🚀 Running complete test suite with guardian"
    - chmod +x scripts/run_complete_test_suite.sh
    - scripts/run_complete_test_suite.sh
  artifacts:
    paths:
      - test_artifacts/
      - test_status.env
    expire_in: 30 days

# Deployment readiness check
deployment-readiness:
  stage: deployment-readiness
  image: python:3.12
  needs: 
    - coverage-guardian
    - complete-test-suite
    - security-scan
  script:
    - source .venv/bin/activate
    - echo "🎯 Final deployment readiness validation"
    - python scripts/guardian_enforcer.py --threshold $COVERAGE_THRESHOLD
    - |
      cat > deployment_report.json << EOF
      {
        "timestamp": "$(date -Iseconds)",
        "pipeline_id": "$CI_PIPELINE_ID",
        "commit_sha": "$CI_COMMIT_SHA",
        "branch": "$CI_COMMIT_REF_NAME",
        "coverage_status": "100%",
        "guardian_status": "APPROVED",
        "security_validation": "PASSED",
        "deployment_ready": true
      }
      EOF
    - echo "📋 Deployment Report:"
    - cat deployment_report.json
  artifacts:
    paths:
      - deployment_report.json
    expire_in: 90 days
  only:
    - main

# Pages deployment for coverage reports
pages:
  stage: deployment-readiness
  needs: ["coverage-guardian"]
  script:
    - mkdir public
    - cp -r htmlcov/* public/ 2>/dev/null || true
    - echo "Coverage reports deployed to GitLab Pages"
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - main