# Pre-commit hooks for pmake-recover
# Security-focused configuration with comprehensive checks

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
      - id: black
        name: Format code with Black
        args: [--line-length=88]
        
  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Sort imports with isort
        args: [--profile=black, --line-length=88]

  # Generic pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
      - id: check-toml
        name: Check TOML syntax  
      - id: check-json
        name: Check JSON syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: mixed-line-ending
        name: Fix mixed line endings
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
      - id: debug-statements
        name: Check for debug statements

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Security scan with Bandit
        args: [-r, ., -x, tests/]
        exclude: ^tests/

  # Dependency security scanning
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        name: Dependency vulnerability scan
        args: [--json, --output, safety-report.json]
        pass_filenames: false

  # Code quality linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Lint with flake8
        additional_dependencies:
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
          - flake8-security
          - flake8-bandit
        args:
          - --max-line-length=88
          - --extend-ignore=E203,W503
          - --max-complexity=10

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        name: Type checking with mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]

  # Advanced linting
  - repo: https://github.com/pycqa/pylint
    rev: v3.0.0a7
    hooks:
      - id: pylint
        name: Advanced linting with pylint
        args:
          - --disable=C0114,C0115,C0116  # Missing docstrings
          - --max-line-length=88
          - --good-names=i,j,k,v,ex,Run,_

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        args: [-d, relaxed]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: ^tests/

  # Documentation linting
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.1
    hooks:
      - id: doc8
        name: Lint documentation
        args: [--max-line-length=88]

  # Test runner (fast tests only)
  - repo: local
    hooks:
      - id: pytest-fast
        name: Run fast tests
        entry: pytest
        language: system
        args: 
          - tests/unit/
          - --verbose
          - --tb=short
          - --maxfail=3
          - -x  # Stop on first failure
          - -m "not slow"
        pass_filenames: false
        stages: [pre-push]

  # Coverage check (pre-push only)
  - repo: local
    hooks:
      - id: coverage-check
        name: Check test coverage
        entry: bash
        language: system
        args:
          - -c
          - |
            pytest tests/unit/ --cov=. --cov-fail-under=100 --cov-report=term-missing:skip-covered --quiet
        pass_filenames: false
        stages: [pre-push]

  # Security test runner
  - repo: local
    hooks:
      - id: security-tests
        name: Run security tests
        entry: pytest
        language: system
        args:
          - tests/
          - -m security
          - --verbose
          - --tb=short
        pass_filenames: false
        stages: [pre-push]

  # File permissions check (for security)
  - repo: local
    hooks:
      - id: check-file-permissions
        name: Check file permissions
        entry: bash
        language: system
        args:
          - -c
          - |
            # Check for files that should not be executable
            if find . -name "*.py" -perm /111 -not -path "./.venv/*" -not -name "makepin.py" -not -name "recoverpin.py" | grep -q .; then
              echo "Error: Found Python files with execute permissions"
              find . -name "*.py" -perm /111 -not -path "./.venv/*" -not -name "makepin.py" -not -name "recoverpin.py"
              exit 1
            fi
            # Check for sensitive files with wrong permissions
            if [ -d "files" ]; then
              if ! stat -c "%a" files | grep -q "^700$"; then
                echo "Error: files/ directory should have 700 permissions"
                exit 1
              fi
            fi
        pass_filenames: false

  # Entropy validation for random number generation
  - repo: local
    hooks:
      - id: entropy-check
        name: Validate entropy sources
        entry: python
        language: system
        args:
          - -c
          - |
            import ast
            import sys
            
            # Check for insecure random usage
            for file_path in sys.argv[1:]:
              if not file_path.endswith('.py'):
                continue
              try:
                with open(file_path, 'r') as f:
                  tree = ast.parse(f.read())
                for node in ast.walk(tree):
                  if isinstance(node, ast.Import):
                    for alias in node.names:
                      if alias.name == 'random' and file_path not in ['tests/']:
                        print(f"Warning: Insecure 'random' import in {file_path}")
                  elif isinstance(node, ast.ImportFrom) and node.module == 'random':
                    if file_path not in ['tests/']:
                      print(f"Warning: Insecure random import in {file_path}")
              except Exception:
                pass  # Skip files that can't be parsed
        files: \.py$
        
  # Final validation hook
  - repo: local
    hooks:
      - id: final-validation
        name: Final pre-commit validation
        entry: bash
        language: system
        args:
          - -c
          - |
            echo "âœ… All pre-commit hooks passed!"
            echo "Ready for commit/push."
        pass_filenames: false
        always_run: true
        stages: [pre-push]