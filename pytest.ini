[tool:pytest]
# Strict test configuration for pmake-recover with security testing
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage requirements - 100% mandatory
addopts = 
    --strict-markers
    --strict-config
    --verbose
    -ra
    --tb=short
    --showlocals
    --cov=.
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --cov-fail-under=100
    --cov-branch
    --maxfail=1
    --color=yes
    -v
    --durations=10
    --hypothesis-show-statistics
    --hypothesis-verbosity=verbose

# Markers for test organization
markers =
    unit: Unit tests
    integration: Integration tests
    security: Security tests requiring special attention
    slow: Slow tests (> 1 second)
    requires_file: Tests that require file system access
    encryption: Tests for encryption functionality
    random: Tests for random generation
    cli: Tests for CLI interface
    e2e: End-to-end tests
    crypto: Cryptographic security tests
    input_validation: Input validation security tests  
    file_security: File operation security tests
    attack_scenario: Attack scenario simulation tests
    property_based: Property-based security testing with Hypothesis
    performance: Performance security tests
    memory_safety: Memory safety security tests
    timing_attack: Timing attack resistance tests
    entropy: Entropy and randomness tests
    network: Network security tests (if applicable)
    critical: Critical security tests that must always pass

# Timeout for tests
timeout = 30
timeout_method = thread

# Hypothesis configuration for property-based testing
hypothesis_verbosity = verbose
hypothesis_show_statistics = true
hypothesis_deadline = 5000
hypothesis_max_examples = 1000
hypothesis_derandomize = false

# Security-specific settings
security_hardcoded_password_string = true
security_hardcoded_password_funcdef = true  
security_hardcoded_password_default = true
security_shell_injection = true
security_sql_injection = true
security_assert_used = true
security_exec_used = true
security_eval_used = true

# Disable warnings we don't care about
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::DeprecationWarning:hypothesis.*
    ignore::pytest.PytestUnraisableExceptionWarning

# Live logging for debugging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Minimum Python version
minversion = 3.8

# Ensure consistent test ordering
console_output_style = progress

# Required plugins
required_plugins = 
    pytest-cov
    pytest-timeout

# Test discovery patterns
norecursedirs = .git .tox dist build *.egg venv .venv __pycache__

# Cache directory
cache_dir = .pytest_cache

# XML output for CI/CD integration
junit_family = xunit2
junit_suite_name = pmake-recover-security-tests